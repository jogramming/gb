package cpu

func (c *Cpu) AddInstructions() {
	// 0x
	c.addInstruction(0x00, NOP, 1, 4, false)
	c.addInstruction(0x01, LDBCnn, 3, 12, false)
	c.addInstruction(0x02, LDBCA, 1, 8, false)
	c.addInstruction(0x03, INCrrBC, 1, 8, false)
	c.addInstruction(0x04, INCB, 1, 4, false)
	c.addInstruction(0x05, DECB, 1, 4, false)
	c.addInstruction(0x06, LDBn, 2, 8, false)
	c.addInstruction(0x08, LDnnSP, 3, 20, false)
	c.addInstruction(0x09, ADDHLBC, 1, 8, false)
	c.addInstruction(0x0a, LDABC, 1, 8, false)
	c.addInstruction(0x0b, DECrrBC, 1, 8, false)
	c.addInstruction(0x0c, INCC, 1, 4, false)
	c.addInstruction(0x0d, DECC, 1, 4, false)
	c.addInstruction(0x0e, LDCn, 2, 8, false)
	// 1x
	c.addInstruction(0x11, LDDEnn, 3, 12, false)
	c.addInstruction(0x12, LDDEA, 1, 8, false)
	c.addInstruction(0x13, INCrrDE, 1, 8, false)
	c.addInstruction(0x14, INCD, 1, 4, false)
	c.addInstruction(0x15, DECD, 1, 4, false)
	c.addInstruction(0x16, LDDn, 2, 8, false)
	c.addInstruction(0x19, ADDHLDE, 1, 8, false)
	c.addInstruction(0x1a, LDADE, 1, 8, false)
	c.addInstruction(0x1b, DECrrDE, 1, 8, false)
	c.addInstruction(0x1c, INCE, 1, 4, false)
	c.addInstruction(0x1d, DECE, 1, 4, false)
	c.addInstruction(0x1e, LDEn, 2, 8, false)
	// 2x
	c.addInstruction(0x21, LDHLnn, 3, 12, false)
	c.addInstruction(0x22, LDIHLA, 1, 8, false)
	c.addInstruction(0x23, INCrrHL, 1, 8, false)
	c.addInstruction(0x24, INCH, 1, 4, false)
	c.addInstruction(0x25, DECH, 1, 4, false)
	c.addInstruction(0x26, LDHn, 2, 8, false)
	c.addInstruction(0x27, DAA, 1, 4, false)
	c.addInstruction(0x29, ADDHLHL, 1, 8, false)
	c.addInstruction(0x2a, LDIAHL, 1, 8, false)
	c.addInstruction(0x2b, DECrrHL, 1, 8, false)
	c.addInstruction(0x2c, INCL, 1, 4, false)
	c.addInstruction(0x2d, DECL, 1, 4, false)
	c.addInstruction(0x2e, LDAn, 2, 8, false)
	c.addInstruction(0x2f, CPL, 1, 4, false)
	// 3x
	c.addInstruction(0x31, LDSPnn, 3, 12, false)
	c.addInstruction(0x32, LDDHLA, 1, 8, false)
	c.addInstruction(0x33, INCrrSP, 1, 8, false)
	c.addInstruction(0x34, INCHL, 1, 12, false)
	c.addInstruction(0x35, DECHL, 1, 12, false)
	c.addInstruction(0x36, LDHLn, 2, 12, false)
	c.addInstruction(0x37, SCF, 1, 4, false)
	c.addInstruction(0x39, ADDHLSP, 1, 8, false)
	c.addInstruction(0x3a, LDDAHL, 1, 8, false)
	c.addInstruction(0x3b, DECrrSP, 1, 8, false)
	c.addInstruction(0x3c, INCA, 1, 4, false)
	c.addInstruction(0x3d, DECA, 1, 4, false)
	c.addInstruction(0x3e, LDAn, 2, 8, false)
	c.addInstruction(0x3f, CCF, 1, 4, false)
	// 4x
	c.addInstruction(0x40, LDBB, 1, 4, false)
	c.addInstruction(0x41, LDBC, 1, 4, false)
	c.addInstruction(0x42, LDBD, 1, 4, false)
	c.addInstruction(0x43, LDBE, 1, 4, false)
	c.addInstruction(0x44, LDBH, 1, 4, false)
	c.addInstruction(0x45, LDBL, 1, 4, false)
	c.addInstruction(0x46, LDBHL, 1, 8, false)
	c.addInstruction(0x47, LDBA, 1, 4, false)
	c.addInstruction(0x48, LDCB, 1, 4, false)
	c.addInstruction(0x49, LDCC, 1, 4, false)
	c.addInstruction(0x4a, LDCD, 1, 4, false)
	c.addInstruction(0x4b, LDCE, 1, 4, false)
	c.addInstruction(0x4c, LDCH, 1, 4, false)
	c.addInstruction(0x4d, LDCL, 1, 4, false)
	c.addInstruction(0x4e, LDCHL, 1, 8, false)
	c.addInstruction(0x4f, LDCA, 1, 4, false)
	// 5x
	c.addInstruction(0x50, LDDB, 1, 4, false)
	c.addInstruction(0x51, LDDC, 1, 4, false)
	c.addInstruction(0x52, LDDD, 1, 4, false)
	c.addInstruction(0x53, LDDE, 1, 4, false)
	c.addInstruction(0x54, LDDH, 1, 4, false)
	c.addInstruction(0x55, LDDL, 1, 4, false)
	c.addInstruction(0x56, LDDHL, 1, 8, false)
	c.addInstruction(0x57, LDDA, 1, 4, false)
	c.addInstruction(0x58, LDEB, 1, 4, false)
	c.addInstruction(0x59, LDEC, 1, 4, false)
	c.addInstruction(0x5a, LDED, 1, 4, false)
	c.addInstruction(0x5b, LDEE, 1, 4, false)
	c.addInstruction(0x5c, LDEH, 1, 4, false)
	c.addInstruction(0x5d, LDEL, 1, 4, false)
	c.addInstruction(0x5e, LDEHL, 1, 8, false)
	c.addInstruction(0x5f, LDEA, 1, 4, false)
	// 6x
	c.addInstruction(0x60, LDHB, 1, 4, false)
	c.addInstruction(0x61, LDHC, 1, 4, false)
	c.addInstruction(0x62, LDHD, 1, 4, false)
	c.addInstruction(0x63, LDHE, 1, 4, false)
	c.addInstruction(0x64, LDHH, 1, 4, false)
	c.addInstruction(0x65, LDHL, 1, 4, false)
	c.addInstruction(0x66, LDHHL, 1, 8, false)
	c.addInstruction(0x67, LDHA, 1, 4, false)
	c.addInstruction(0x68, LDLB, 1, 4, false)
	c.addInstruction(0x69, LDLC, 1, 4, false)
	c.addInstruction(0x6a, LDLD, 1, 4, false)
	c.addInstruction(0x6b, LDLE, 1, 4, false)
	c.addInstruction(0x6c, LDLH, 1, 4, false)
	c.addInstruction(0x6d, LDLL, 1, 4, false)
	c.addInstruction(0x6e, LDLHL, 1, 8, false)
	c.addInstruction(0x6f, LDLA, 1, 4, false)
	// 7x
	c.addInstruction(0x70, LDHLB, 1, 8, false)
	c.addInstruction(0x71, LDHLC, 1, 8, false)
	c.addInstruction(0x72, LDHLD, 1, 8, false)
	c.addInstruction(0x73, LDHLE, 1, 8, false)
	c.addInstruction(0x74, LDHLH, 1, 8, false)
	c.addInstruction(0x75, LDHLL, 1, 8, false)
	// Halt instruction here
	c.addInstruction(0x77, LDHLA, 1, 8, false)
	c.addInstruction(0x78, LDAB, 1, 4, false)
	c.addInstruction(0x79, LDAC, 1, 4, false)
	c.addInstruction(0x7a, LDAD, 1, 4, false)
	c.addInstruction(0x7b, LDAE, 1, 4, false)
	c.addInstruction(0x7c, LDAH, 1, 4, false)
	c.addInstruction(0x7d, LDAL, 1, 4, false)
	c.addInstruction(0x7e, LDAHL, 1, 8, false)
	c.addInstruction(0x7f, LDAA, 1, 4, false)
	// 8x
	c.addInstruction(0x80, ADDAB, 1, 4, false)
	c.addInstruction(0x81, ADDAC, 1, 4, false)
	c.addInstruction(0x82, ADDAD, 1, 4, false)
	c.addInstruction(0x83, ADDAE, 1, 4, false)
	c.addInstruction(0x84, ADDAH, 1, 4, false)
	c.addInstruction(0x85, ADDAL, 1, 4, false)
	c.addInstruction(0x86, ADDAHL, 1, 8, false)
	c.addInstruction(0x87, ADDAA, 1, 4, false)
	c.addInstruction(0x88, ADCAB, 1, 4, false)
	c.addInstruction(0x89, ADCAC, 1, 4, false)
	c.addInstruction(0x8a, ADCAD, 1, 4, false)
	c.addInstruction(0x8b, ADCAE, 1, 4, false)
	c.addInstruction(0x8c, ADCAH, 1, 4, false)
	c.addInstruction(0x8d, ADCAL, 1, 4, false)
	c.addInstruction(0x8e, ADCAHL, 1, 8, false)
	c.addInstruction(0x8f, ADCAA, 1, 4, false)
	// 9x
	c.addInstruction(0x90, SUBAB, 1, 4, false)
	c.addInstruction(0x91, SUBAC, 1, 4, false)
	c.addInstruction(0x92, SUBAD, 1, 4, false)
	c.addInstruction(0x93, SUBAE, 1, 4, false)
	c.addInstruction(0x94, SUBAH, 1, 4, false)
	c.addInstruction(0x95, SUBAL, 1, 4, false)
	c.addInstruction(0x96, SUBAHL, 1, 8, false)
	c.addInstruction(0x97, SUBAA, 1, 4, false)
	c.addInstruction(0x98, SBCAB, 1, 4, false)
	c.addInstruction(0x99, SBCAC, 1, 4, false)
	c.addInstruction(0x9a, SBCAD, 1, 4, false)
	c.addInstruction(0x9b, SBCAE, 1, 4, false)
	c.addInstruction(0x9c, SBCAH, 1, 4, false)
	c.addInstruction(0x9d, SBCAL, 1, 4, false)
	c.addInstruction(0x9e, SBCAHL, 1, 8, false)
	c.addInstruction(0x9f, SBCAA, 1, 4, false)
	// ax
	c.addInstruction(0xa0, ANDAB, 1, 4, false)
	c.addInstruction(0xa1, ANDAC, 1, 4, false)
	c.addInstruction(0xa2, ANDAD, 1, 4, false)
	c.addInstruction(0xa3, ANDAE, 1, 4, false)
	c.addInstruction(0xa4, ANDAH, 1, 4, false)
	c.addInstruction(0xa5, ANDAL, 1, 4, false)
	c.addInstruction(0xa6, ANDAHL, 1, 8, false)
	c.addInstruction(0xa7, ANDAA, 1, 4, false)
	c.addInstruction(0xa8, XORAB, 1, 4, false)
	c.addInstruction(0xa9, XORAC, 1, 4, false)
	c.addInstruction(0xaa, XORAD, 1, 4, false)
	c.addInstruction(0xab, XORAE, 1, 4, false)
	c.addInstruction(0xac, XORAH, 1, 4, false)
	c.addInstruction(0xad, XORAL, 1, 4, false)
	c.addInstruction(0xae, XORAHL, 1, 8, false)
	c.addInstruction(0xaf, XORAA, 1, 4, false)
	// bx
	c.addInstruction(0xb0, ORAB, 1, 4, false)
	c.addInstruction(0xb1, ORAC, 1, 4, false)
	c.addInstruction(0xb2, ORAD, 1, 4, false)
	c.addInstruction(0xb3, ORAE, 1, 4, false)
	c.addInstruction(0xb4, ORAH, 1, 4, false)
	c.addInstruction(0xb5, ORAL, 1, 4, false)
	c.addInstruction(0xb6, ORAHL, 1, 8, false)
	c.addInstruction(0xb7, ORAA, 1, 4, false)
	c.addInstruction(0xb8, CPAB, 1, 4, false)
	c.addInstruction(0xb9, CPAC, 1, 4, false)
	c.addInstruction(0xba, CPAD, 1, 4, false)
	c.addInstruction(0xbb, CPAE, 1, 4, false)
	c.addInstruction(0xbc, CPAH, 1, 4, false)
	c.addInstruction(0xbd, CPAL, 1, 4, false)
	c.addInstruction(0xbe, CPAHL, 1, 8, false)
	c.addInstruction(0xbf, CPAA, 1, 4, false)
	// cx
	c.addInstruction(0xc1, POPBC, 1, 12, false)
	c.addInstruction(0xc5, PUSHBC, 1, 16, false)
	c.addInstruction(0xc6, ADDAn, 2, 8, false)
	c.addInstruction(0xce, ADCAn, 2, 8, false)
	// dx
	c.addInstruction(0xd1, POPDE, 1, 12, false)
	c.addInstruction(0xd5, PUSHDE, 1, 16, false)
	c.addInstruction(0xd6, SUBAn, 2, 8, false)
	c.addInstruction(0xde, SBCAn, 2, 8, false)
	// ex
	c.addInstruction(0xe0, LDIOnA, 2, 12, false)
	c.addInstruction(0xe1, POPHL, 1, 12, false)
	c.addInstruction(0xe2, LDIOCA, 2, 8, false)
	c.addInstruction(0xe5, PUSHHL, 1, 16, false)
	c.addInstruction(0xe6, ANDAn, 2, 8, false)
	c.addInstruction(0xea, LDnnA, 3, 16, false)
	c.addInstruction(0xee, XORAn, 2, 8, false)
	// fx
	c.addInstruction(0xf0, LDAIOn, 2, 12, false)
	c.addInstruction(0xf1, POPAF, 1, 12, false)
	c.addInstruction(0xf2, LDAIOC, 2, 8, false)
	c.addInstruction(0xf5, PUSHAF, 1, 16, false)
	c.addInstruction(0xf6, ORAn, 2, 8, false)
	c.addInstruction(0xfa, LDAnn, 3, 16, false)
	c.addInstruction(0xfe, CPAn, 2, 8, false)

	// Prefix CB
	c.addInstruction(0x30, SWAPB, 1, 8, true)
	c.addInstruction(0x31, SWAPC, 1, 8, true)
	c.addInstruction(0x32, SWAPD, 1, 8, true)
	c.addInstruction(0x33, SWAPE, 1, 8, true)
	c.addInstruction(0x34, SWAPH, 1, 8, true)
	c.addInstruction(0x35, SWAPL, 1, 8, true)
	c.addInstruction(0x36, SWAPHL, 1, 16, true)
	c.addInstruction(0x37, SWAPA, 1, 8, true)

}

func (c *Cpu) addInstruction(opcode byte, handler func(*Cpu), size int, cycles int, cbPref bool) {
	completeOp := uint16(opcode)
	if cbPref {
		completeOp = 0xcb00 & completeOp // Apply the prefix if needed
	}

	instruction := NewInstruction(handler, size, cycles)
	instruction.Op = completeOp
	c.Instructions[completeOp] = &instruction
}
