package cpu

func (c *Cpu) AddInstructions() {
	// 0x
	c.addInstruction(0x00, NOP, 1, 4, false, "NOP")
	c.addInstruction(0x01, LDBCnn, 3, 12, false, "LDBCnn")
	c.addInstruction(0x02, LDBCA, 1, 8, false, "LDBCA")
	c.addInstruction(0x03, INCrrBC, 1, 8, false, "INCrrBC")
	c.addInstruction(0x04, INCB, 1, 4, false, "INCB")
	c.addInstruction(0x05, DECB, 1, 4, false, "DECB")
	c.addInstruction(0x06, LDBn, 2, 8, false, "LDBn")
	c.addInstruction(0x07, RLCA, 1, 4, false, "RLCA")
	c.addInstruction(0x08, LDnnSP, 3, 20, false, "LDnnSP")
	c.addInstruction(0x09, ADDHLBC, 1, 8, false, "ADDHLBC")
	c.addInstruction(0x0a, LDABC, 1, 8, false, "LDABC")
	c.addInstruction(0x0b, DECrrBC, 1, 8, false, "DECrrBC")
	c.addInstruction(0x0c, INCC, 1, 4, false, "INCC")
	c.addInstruction(0x0d, DECC, 1, 4, false, "DECC")
	c.addInstruction(0x0e, LDCn, 2, 8, false, "LDCn")
	c.addInstruction(0x0f, RRCA, 1, 4, false, "RRCA")
	// 1x
	c.addInstruction(0x11, LDDEnn, 3, 12, false, "LDDEnn")
	c.addInstruction(0x12, LDDEA, 1, 8, false, "LDDEA")
	c.addInstruction(0x13, INCrrDE, 1, 8, false, "INCrrDE")
	c.addInstruction(0x14, INCD, 1, 4, false, "INCD")
	c.addInstruction(0x15, DECD, 1, 4, false, "DECD")
	c.addInstruction(0x16, LDDn, 2, 8, false, "LDDn")
	c.addInstruction(0x17, RLA, 1, 4, false, "RLA")
	c.addInstruction(0x19, ADDHLDE, 1, 8, false, "ADDHLDE")
	c.addInstruction(0x1a, LDADE, 1, 8, false, "LDADE")
	c.addInstruction(0x1b, DECrrDE, 1, 8, false, "DECrrDE")
	c.addInstruction(0x1c, INCE, 1, 4, false, "INCE")
	c.addInstruction(0x1d, DECE, 1, 4, false, "DECE")
	c.addInstruction(0x1e, LDEn, 2, 8, false, "LDEn")
	c.addInstruction(0x1f, RRA, 1, 4, false, "RRA")
	// 2x
	c.addInstruction(0x20, JRNZn, 2, 8, false, "JRNZn")
	c.addInstruction(0x21, LDHLnn, 3, 12, false, "LDHLnn")
	c.addInstruction(0x22, LDIHLA, 1, 8, false, "LDIHLA")
	c.addInstruction(0x23, INCrrHL, 1, 8, false, "INCrrHL")
	c.addInstruction(0x24, INCH, 1, 4, false, "INCH")
	c.addInstruction(0x25, DECH, 1, 4, false, "DECH")
	c.addInstruction(0x26, LDHn, 2, 8, false, "LDHn")
	c.addInstruction(0x27, DAA, 1, 4, false, "DAA")
	c.addInstruction(0x28, JRZn, 2, 8, false, "JRZn")
	c.addInstruction(0x29, ADDHLHL, 1, 8, false, "ADDHLHL")
	c.addInstruction(0x2a, LDIAHL, 1, 8, false, "LDIAHL")
	c.addInstruction(0x2b, DECrrHL, 1, 8, false, "DECrrHL")
	c.addInstruction(0x2c, INCL, 1, 4, false, "INCL")
	c.addInstruction(0x2d, DECL, 1, 4, false, "DECL")
	c.addInstruction(0x2e, LDAn, 2, 8, false, "LDAn")
	c.addInstruction(0x2f, CPL, 1, 4, false, "CPL")
	// 3x
	c.addInstruction(0x30, JRNCn, 2, 8, false, "JRNCn")
	c.addInstruction(0x31, LDSPnn, 3, 12, false, "LDSPnn")
	c.addInstruction(0x32, LDDHLA, 1, 8, false, "LDDHLA")
	c.addInstruction(0x33, INCrrSP, 1, 8, false, "INCrrSP")
	c.addInstruction(0x34, INCHL, 1, 12, false, "INCHL")
	c.addInstruction(0x35, DECHL, 1, 12, false, "DECHL")
	c.addInstruction(0x36, LDHLn, 2, 12, false, "LDHLn")
	c.addInstruction(0x37, SCF, 1, 4, false, "SCF")
	c.addInstruction(0x38, JRCn, 2, 8, false, "JRCn")
	c.addInstruction(0x39, ADDHLSP, 1, 8, false, "ADDHLSP")
	c.addInstruction(0x3a, LDDAHL, 1, 8, false, "LDDAHL")
	c.addInstruction(0x3b, DECrrSP, 1, 8, false, "DECrrSP")
	c.addInstruction(0x3c, INCA, 1, 4, false, "INCA")
	c.addInstruction(0x3d, DECA, 1, 4, false, "DECA")
	c.addInstruction(0x3e, LDAn, 2, 8, false, "LDAn")
	c.addInstruction(0x3f, CCF, 1, 4, false, "CCF")
	// 4x
	c.addInstruction(0x40, LDBB, 1, 4, false, "LDBB")
	c.addInstruction(0x41, LDBC, 1, 4, false, "LDBC")
	c.addInstruction(0x42, LDBD, 1, 4, false, "LDBD")
	c.addInstruction(0x43, LDBE, 1, 4, false, "LDBE")
	c.addInstruction(0x44, LDBH, 1, 4, false, "LDBH")
	c.addInstruction(0x45, LDBL, 1, 4, false, "LDBL")
	c.addInstruction(0x46, LDBHL, 1, 8, false, "LDBHL")
	c.addInstruction(0x47, LDBA, 1, 4, false, "LDBA")
	c.addInstruction(0x48, LDCB, 1, 4, false, "LDCB")
	c.addInstruction(0x49, LDCC, 1, 4, false, "LDCC")
	c.addInstruction(0x4a, LDCD, 1, 4, false, "LDCD")
	c.addInstruction(0x4b, LDCE, 1, 4, false, "LDCE")
	c.addInstruction(0x4c, LDCH, 1, 4, false, "LDCH")
	c.addInstruction(0x4d, LDCL, 1, 4, false, "LDCL")
	c.addInstruction(0x4e, LDCHL, 1, 8, false, "LDCHL")
	c.addInstruction(0x4f, LDCA, 1, 4, false, "LDCA")
	// 5x
	c.addInstruction(0x50, LDDB, 1, 4, false, "LDDB")
	c.addInstruction(0x51, LDDC, 1, 4, false, "LDDC")
	c.addInstruction(0x52, LDDD, 1, 4, false, "LDDD")
	c.addInstruction(0x53, LDDE, 1, 4, false, "LDDE")
	c.addInstruction(0x54, LDDH, 1, 4, false, "LDDH")
	c.addInstruction(0x55, LDDL, 1, 4, false, "LDDL")
	c.addInstruction(0x56, LDDHL, 1, 8, false, "LDDHL")
	c.addInstruction(0x57, LDDA, 1, 4, false, "LDDA")
	c.addInstruction(0x58, LDEB, 1, 4, false, "LDEB")
	c.addInstruction(0x59, LDEC, 1, 4, false, "LDEC")
	c.addInstruction(0x5a, LDED, 1, 4, false, "LDED")
	c.addInstruction(0x5b, LDEE, 1, 4, false, "LDEE")
	c.addInstruction(0x5c, LDEH, 1, 4, false, "LDEH")
	c.addInstruction(0x5d, LDEL, 1, 4, false, "LDEL")
	c.addInstruction(0x5e, LDEHL, 1, 8, false, "LDEHL")
	c.addInstruction(0x5f, LDEA, 1, 4, false, "LDEA")
	// 6x
	c.addInstruction(0x60, LDHB, 1, 4, false, "LDHB")
	c.addInstruction(0x61, LDHC, 1, 4, false, "LDHC")
	c.addInstruction(0x62, LDHD, 1, 4, false, "LDHD")
	c.addInstruction(0x63, LDHE, 1, 4, false, "LDHE")
	c.addInstruction(0x64, LDHH, 1, 4, false, "LDHH")
	c.addInstruction(0x65, LDHL, 1, 4, false, "LDHL")
	c.addInstruction(0x66, LDHHL, 1, 8, false, "LDHHL")
	c.addInstruction(0x67, LDHA, 1, 4, false, "LDHA")
	c.addInstruction(0x68, LDLB, 1, 4, false, "LDLB")
	c.addInstruction(0x69, LDLC, 1, 4, false, "LDLC")
	c.addInstruction(0x6a, LDLD, 1, 4, false, "LDLD")
	c.addInstruction(0x6b, LDLE, 1, 4, false, "LDLE")
	c.addInstruction(0x6c, LDLH, 1, 4, false, "LDLH")
	c.addInstruction(0x6d, LDLL, 1, 4, false, "LDLL")
	c.addInstruction(0x6e, LDLHL, 1, 8, false, "LDLHL")
	c.addInstruction(0x6f, LDLA, 1, 4, false, "LDLA")
	// 7x
	c.addInstruction(0x70, LDHLB, 1, 8, false, "LDHLB")
	c.addInstruction(0x71, LDHLC, 1, 8, false, "LDHLC")
	c.addInstruction(0x72, LDHLD, 1, 8, false, "LDHLD")
	c.addInstruction(0x73, LDHLE, 1, 8, false, "LDHLE")
	c.addInstruction(0x74, LDHLH, 1, 8, false, "LDHLH")
	c.addInstruction(0x75, LDHLL, 1, 8, false, "LDHLL")
	// Halt instruction here
	c.addInstruction(0x77, LDHLA, 1, 8, false, "LDHLA")
	c.addInstruction(0x78, LDAB, 1, 4, false, "LDAB")
	c.addInstruction(0x79, LDAC, 1, 4, false, "LDAC")
	c.addInstruction(0x7a, LDAD, 1, 4, false, "LDAD")
	c.addInstruction(0x7b, LDAE, 1, 4, false, "LDAE")
	c.addInstruction(0x7c, LDAH, 1, 4, false, "LDAH")
	c.addInstruction(0x7d, LDAL, 1, 4, false, "LDAL")
	c.addInstruction(0x7e, LDAHL, 1, 8, false, "LDAHL")
	c.addInstruction(0x7f, LDAA, 1, 4, false, "LDAA")
	// 8x
	c.addInstruction(0x80, ADDAB, 1, 4, false, "ADDAB")
	c.addInstruction(0x81, ADDAC, 1, 4, false, "ADDAC")
	c.addInstruction(0x82, ADDAD, 1, 4, false, "ADDAD")
	c.addInstruction(0x83, ADDAE, 1, 4, false, "ADDAE")
	c.addInstruction(0x84, ADDAH, 1, 4, false, "ADDAH")
	c.addInstruction(0x85, ADDAL, 1, 4, false, "ADDAL")
	c.addInstruction(0x86, ADDAHL, 1, 8, false, "ADDAHL")
	c.addInstruction(0x87, ADDAA, 1, 4, false, "ADDAA")
	c.addInstruction(0x88, ADCAB, 1, 4, false, "ADCAB")
	c.addInstruction(0x89, ADCAC, 1, 4, false, "ADCAC")
	c.addInstruction(0x8a, ADCAD, 1, 4, false, "ADCAD")
	c.addInstruction(0x8b, ADCAE, 1, 4, false, "ADCAE")
	c.addInstruction(0x8c, ADCAH, 1, 4, false, "ADCAH")
	c.addInstruction(0x8d, ADCAL, 1, 4, false, "ADCAL")
	c.addInstruction(0x8e, ADCAHL, 1, 8, false, "ADCAHL")
	c.addInstruction(0x8f, ADCAA, 1, 4, false, "ADCAA")
	// 9x
	c.addInstruction(0x90, SUBAB, 1, 4, false, "SUBAB")
	c.addInstruction(0x91, SUBAC, 1, 4, false, "SUBAC")
	c.addInstruction(0x92, SUBAD, 1, 4, false, "SUBAD")
	c.addInstruction(0x93, SUBAE, 1, 4, false, "SUBAE")
	c.addInstruction(0x94, SUBAH, 1, 4, false, "SUBAH")
	c.addInstruction(0x95, SUBAL, 1, 4, false, "SUBAL")
	c.addInstruction(0x96, SUBAHL, 1, 8, false, "SUBAHL")
	c.addInstruction(0x97, SUBAA, 1, 4, false, "SUBAA")
	c.addInstruction(0x98, SBCAB, 1, 4, false, "SBCAB")
	c.addInstruction(0x99, SBCAC, 1, 4, false, "SBCAC")
	c.addInstruction(0x9a, SBCAD, 1, 4, false, "SBCAD")
	c.addInstruction(0x9b, SBCAE, 1, 4, false, "SBCAE")
	c.addInstruction(0x9c, SBCAH, 1, 4, false, "SBCAH")
	c.addInstruction(0x9d, SBCAL, 1, 4, false, "SBCAL")
	c.addInstruction(0x9e, SBCAHL, 1, 8, false, "SBCAHL")
	c.addInstruction(0x9f, SBCAA, 1, 4, false, "SBCAA")
	// ax
	c.addInstruction(0xa0, ANDAB, 1, 4, false, "ANDAB")
	c.addInstruction(0xa1, ANDAC, 1, 4, false, "ANDAC")
	c.addInstruction(0xa2, ANDAD, 1, 4, false, "ANDAD")
	c.addInstruction(0xa3, ANDAE, 1, 4, false, "ANDAE")
	c.addInstruction(0xa4, ANDAH, 1, 4, false, "ANDAH")
	c.addInstruction(0xa5, ANDAL, 1, 4, false, "ANDAL")
	c.addInstruction(0xa6, ANDAHL, 1, 8, false, "ANDAHL")
	c.addInstruction(0xa7, ANDAA, 1, 4, false, "ANDAA")
	c.addInstruction(0xa8, XORAB, 1, 4, false, "XORAB")
	c.addInstruction(0xa9, XORAC, 1, 4, false, "XORAC")
	c.addInstruction(0xaa, XORAD, 1, 4, false, "XORAD")
	c.addInstruction(0xab, XORAE, 1, 4, false, "XORAE")
	c.addInstruction(0xac, XORAH, 1, 4, false, "XORAH")
	c.addInstruction(0xad, XORAL, 1, 4, false, "XORAL")
	c.addInstruction(0xae, XORAHL, 1, 8, false, "XORAHL")
	c.addInstruction(0xaf, XORAA, 1, 4, false, "XORAA")
	// bx
	c.addInstruction(0xb0, ORAB, 1, 4, false, "ORAB")
	c.addInstruction(0xb1, ORAC, 1, 4, false, "ORAC")
	c.addInstruction(0xb2, ORAD, 1, 4, false, "ORAD")
	c.addInstruction(0xb3, ORAE, 1, 4, false, "ORAE")
	c.addInstruction(0xb4, ORAH, 1, 4, false, "ORAH")
	c.addInstruction(0xb5, ORAL, 1, 4, false, "ORAL")
	c.addInstruction(0xb6, ORAHL, 1, 8, false, "ORAHL")
	c.addInstruction(0xb7, ORAA, 1, 4, false, "ORAA")
	c.addInstruction(0xb8, CPAB, 1, 4, false, "CPAB")
	c.addInstruction(0xb9, CPAC, 1, 4, false, "CPAC")
	c.addInstruction(0xba, CPAD, 1, 4, false, "CPAD")
	c.addInstruction(0xbb, CPAE, 1, 4, false, "CPAE")
	c.addInstruction(0xbc, CPAH, 1, 4, false, "CPAH")
	c.addInstruction(0xbd, CPAL, 1, 4, false, "CPAL")
	c.addInstruction(0xbe, CPAHL, 1, 8, false, "CPAHL")
	c.addInstruction(0xbf, CPAA, 1, 4, false, "CPAA")
	// cx
	c.addInstruction(0xc1, POPBC, 1, 12, false, "POPBC")
	c.addInstruction(0xc5, PUSHBC, 1, 16, false, "PUSHBC")
	c.addInstruction(0xc6, ADDAn, 2, 8, false, "ADDAn")
	c.addInstruction(0xce, ADCAn, 2, 8, false, "ADCAn")
	c.addInstruction(0xcd, CALLnn, 3, 24, false, "CALLnn")
	// dx
	c.addInstruction(0xd1, POPDE, 1, 12, false, "POPDE")
	c.addInstruction(0xd5, PUSHDE, 1, 16, false, "PUSHDE")
	c.addInstruction(0xd6, SUBAn, 2, 8, false, "SUBAn")
	c.addInstruction(0xde, SBCAn, 2, 8, false, "SBCAn")
	// ex
	c.addInstruction(0xe0, LDIOnA, 2, 12, false, "LDIOnA")
	c.addInstruction(0xe1, POPHL, 1, 12, false, "POPHL")
	c.addInstruction(0xe2, LDIOCA, 2, 8, false, "LDIOCA")
	c.addInstruction(0xe5, PUSHHL, 1, 16, false, "PUSHHL")
	c.addInstruction(0xe6, ANDAn, 2, 8, false, "ANDAn")
	c.addInstruction(0xea, LDnnA, 3, 16, false, "LDnnA")
	c.addInstruction(0xee, XORAn, 2, 8, false, "XORAn")
	// fx
	c.addInstruction(0xf0, LDAIOn, 2, 12, false, "LDAIOn")
	c.addInstruction(0xf1, POPAF, 1, 12, false, "POPAF")
	c.addInstruction(0xf2, LDAIOC, 2, 8, false, "LDAIOC")
	c.addInstruction(0xf5, PUSHAF, 1, 16, false, "PUSHAF")
	c.addInstruction(0xf6, ORAn, 2, 8, false, "ORAn")
	c.addInstruction(0xfa, LDAnn, 3, 16, false, "LDAnn")
	c.addInstruction(0xfe, CPAn, 2, 8, false, "CPAn")

	//-------------------------------------------------------

	// Prefix CB
	c.addInstruction(0x00, RLCB, 2, 8, true, "RLCB")
	c.addInstruction(0x01, RLCC, 2, 8, true, "RLCC")
	c.addInstruction(0x02, RLCD, 2, 8, true, "RLCD")
	c.addInstruction(0x03, RLCE, 2, 8, true, "RLCE")
	c.addInstruction(0x04, RLCH, 2, 8, true, "RLCH")
	c.addInstruction(0x05, RLCL, 2, 8, true, "RLCL")
	c.addInstruction(0x06, RLCHL, 2, 8, true, "RLCHL")
	c.addInstruction(0x07, RLCA, 2, 8, true, "RLCA")

	c.addInstruction(0x10, RLB, 2, 8, true, "RLB")
	c.addInstruction(0x11, RLC, 2, 8, true, "RLC")
	c.addInstruction(0x12, RLD, 2, 8, true, "RLD")
	c.addInstruction(0x13, RLE, 2, 8, true, "RLE")
	c.addInstruction(0x14, RLH, 2, 8, true, "RLH")
	c.addInstruction(0x15, RLL, 2, 8, true, "RLL")
	c.addInstruction(0x16, RLHL, 2, 8, true, "RLHL")
	c.addInstruction(0x17, RLA, 2, 8, true, "RLA")

	c.addInstruction(0x30, SWAPB, 2, 8, true, "SWAPB")
	c.addInstruction(0x31, SWAPC, 2, 8, true, "SWAPC")
	c.addInstruction(0x32, SWAPD, 2, 8, true, "SWAPD")
	c.addInstruction(0x33, SWAPE, 2, 8, true, "SWAPE")
	c.addInstruction(0x34, SWAPH, 2, 8, true, "SWAPH")
	c.addInstruction(0x35, SWAPL, 2, 8, true, "SWAPL")
	c.addInstruction(0x36, SWAPHL, 2, 16, true, "SWAPHL")
	c.addInstruction(0x37, SWAPA, 2, 8, true, "SWAPA")

	c.addInstruction(0x7c, BIT7H, 2, 8, true, "BIT7H")
}

func (c *Cpu) addInstruction(opcode byte, handler func(*Cpu), size int, cycles int, cbPref bool, mnemonic string) {
	completeOp := uint16(opcode)
	if cbPref {
		completeOp = 0xcb00 | completeOp // Apply the prefix if needed
	}

	instruction := NewInstruction(handler, size, cycles)
	instruction.Op = completeOp
	instruction.Mnemonic = mnemonic
	c.Instructions[completeOp] = &instruction
}
